#!/bin/bash
### BEGIN INIT INFO
# Provides:          ssh_tunnel
# Required-Start:    $remote_fs $network $syslog $named
# Required-Stop:     $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ssh tunnel
### END INIT INFO

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License version 2 for
# more details.
#
# You should have received a copy of the GNU General Public License version 2
# along with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


DAEMON="/usr/bin/ssh"
NAME="ssh_tunnel"
DESC="ssh tunnel"
PID_DIR="/var/run/$NAME"
CONF_DIR="/etc/$NAME"
ARGS="-o ExitOnForwardFailure=yes -o NumberOfPasswordPrompts=0 -N"
USER="tunnel"

. /lib/lsb/init-functions

load_conf(){
 local CONF LARGS PROXY_COMMAND KEY SPORT DEST SSH_DEST BIND TYPE
 CONF=$1
 LARGS="$ARGS"
 if [ -f "$CONF_DIR/$CONF.conf" ]; then
  . $CONF_DIR/$CONF.conf
  if [ ! -z "$PROXY_COMMAND" ]; then
    LARGS="$LARGS -o ProxyCommand=\"$PROXY_COMMAND\""
  fi
  if [ ! -z "$KEY" ]; then
   LARGS="$LARGS -i $KEY"
  fi
  if [ ! -z $SPORT ] && [ ! -z $DEST ] && [ ! -z $TYPE ]; then
   if [ ! -z $BIND ]; then
    LARGS="$LARGS -$TYPE$BIND:$SPORT:$DEST"
   else
    LARGS="$LARGS -$TYPE$SPORT:$DEST"
   fi
  fi
  if [ ! -z "$SSH_DEST" ]; then
   LARGS="$LARGS $SSH_DEST";
  else
    return 1
  fi
  echo -n "$LARGS"
  return 0
 else
  return 1
 fi
}

tunnel_stoped(){
  CONF=$1
  if [ -f $PID_DIR/$CONF.pid ]; then
    pid=`cat $PID_DIR/$CONF.pid`
    if [ `ps -p $pid | wc -l` -eq 2 ]; then
      return 1
    fi
  fi
  return 0
}

tunnel_start(){
 CONF=$1
 if $(tunnel_stoped $CONF) && LARGS=$(load_conf $CONF); then
  log_daemon_msg "Starting $DESC $CONF"
  eval "/sbin/start-stop-daemon --start --background --make-pidfile --pidfile \"$PID_DIR/$CONF.pid\" --user $USER --chuid $USER --exec $DAEMON -- $LARGS"
 else
  log_failure_msg "Tunnel $CONF already running"
 fi
}

tunnel_stop(){
 CONF=$1
 if $(tunnel_stoped $CONF); then
  log_warning_msg "$CONF not running"
 else
   start-stop-daemon --stop --user $USER --pidfile "$PID_DIR/$CONF.pid"
   RET=$?
   if [[ $RET -eq 0 ]]; then
     log_success_msg "The process stopped successfully"
     return 0
   else
     log_failure_msg "The process failed to stop"
     return 1
   fi
 fi
}

start(){
    if test -z "$2" ; then
      for CONF_FILE in `cd $CONF_DIR; ls *.conf 2> /dev/null`; do
        CONF=${CONF_FILE%%.conf}
        tunnel_start $CONF
      done
    else
      while shift ; do
        [ -z "$1" ] && break
        CONF=$1
        if test -e $CONF_DIR/$CONF.conf ; then
            tunnel_start $CONF
        else
          log_failure_msg "missing $CONF_DIR/$CONF.conf"
        fi
      done
    fi
}

stop(){
    if test -z "$2" ; then
      for CONF_FILE in `cd $CONF_DIR; ls *.conf 2> /dev/null`; do
        CONF=${CONF_FILE%%.conf}
        tunnel_stop $CONF
      done
    else
      while shift ; do
        [ -z "$1" ] && break
        CONF=$1
        if test -e $CONF_DIR/$CONF.conf ; then
          tunnel_stop $CONF
        else
          log_failure_msg "missing $CONF_DIR/$CONF.conf"
        fi
      done
    fi
}
status(){
    if test -z "$2" ; then
      for CONF_FILE in `cd $CONF_DIR; ls *.conf 2> /dev/null`; do
        CONF=${CONF_FILE%%.conf}
        status_of_proc -p "$PID_DIR/$CONF.pid" "$DAEMON" "$DESC $CONF"
      done
    else
      while shift ; do
        [ -z "$1" ] && break
        CONF=$1
        status_of_proc -p "$PID_DIR/$CONF.pid" "$DAEMON" "$DESC $CONF"
      done
    fi
}

case $1 in
  start) start $@
  ;;
  stop) stop $@
  ;;
  restart)
    stop $@
    start $@
  ;;
  status)
    status $@
  ;;
  *)
   echo "Usage: $0 {start|stop|restart|status} [`cd $CONF_DIR; ls -m *.conf 2> /dev/null | sed 's/\.conf//g;s/, /|/g'`]" >&2
   exit 1
  ;;

esac

exit 0
